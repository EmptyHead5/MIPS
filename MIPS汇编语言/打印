系统调用编号:int(1), float(2),double(3),string(4),


.data
myCharter: .byte 'm'

.text
  li $v0, 4
  la $a0, myCharter
  syscall 
  //print一个 charter
  
.data
myMessage: .asciiz  "hello world"

.text
  li $v0, 4
  la $a0, myMessage
  syscall 
  //print 一个字符串 string

.data
   age: .word 23 
  # this is a word or integer
   
.text
#print an integer to the screen
  li $v0, 1
  lw $a0, age
  syscall 
  # 符号在assembly 语言中用作注释作用

  .data
  Pi: .float 3.14
.text
     li $v0,2
     lwc1 $f12, Pi
     syscall
  #float的输出有些不同，在.text部分，的lw我们需要输出lwc1是应为在此语言中需要结束coprocessor register 来专门处理float的值
  #并且需要根据规定需要准确的$f12来处理float
  .data
   myDouble: .double 7.202
   zeroDouble: .double 0.0
.text
    ldc1 $f2,myDouble
    ldc1 $f0,zeroDouble
    #zeroDouble会储存在 f0和f1之间
    #myDouble 会储存在f2和f3之间
    li $v0, 3
    add.d $f12, $f2,$f0
    syscall
    #此时的相加只是为了方便理解和学习加法，其实正常的输出并不需要如簇复杂，只需要在
    #ldic $f12,myDouble中将myDouble正确的load在f12内（根据规定），之后lv $v0,3  给予li相应的double所代表的系统调用符号即可打印
    
